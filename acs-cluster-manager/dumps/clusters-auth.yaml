service: !u FP.Service.Authentication
version: 1
# This grants permissions in terms of Service Requirement UUIDs. These
# need to be populated as groups in the Auth service with the
# appropriate objects.
aces:
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.Directory.AdvertiseService 
    target: !u E.Service.EdgeDeployment

  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.Auth.ReadACL
    target: !u E.Perm.All

  # XXX This is nearly root-equivalent.
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.Auth.ManageKerberos
    target: !u FP.Null

  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.Auth.ManageACL
    target: !u G.Perm.Pull

  # XXX This is a very broad grant; it is very nearly root-equivalent.
  # But currently any grant of ManageGroup will be equivalent to this,
  # as groups are expanded recursively and we can just add a victim
  # group to one of our target groups. We have an E.Requirement.Groups,
  # but it is not set up properly by service-setup, and using it won't
  # improve security until the Auth groups are fixed.
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.Auth.ManageGroup
    target: !u FP.Null

  # Watch ConfigDB
  # XXX It's not clear what the target needs to be here. Best would be a
  # permission granting the right to rebirth any device advertising a
  # given service; that requires cmdesc changes. Next best is probably a
  # Service Requirement UUID for the ConfigDB, or just make the service
  # function UUIDs into Auth groups.
  # For now this is in the ACS-specific dump.

  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.ReadConfig
    target: !u FP.App.Info
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.ReadConfig
    target: !u FP.App.ServiceConfig
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.ReadConfig
    target: !u E.App.Cluster
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.ReadConfig
    target: !u E.App.Status
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.ReadConfig
    target: !u E.App.EdgeStatus
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.ReadConfig
    target: !u E.App.Flux
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.ReadConfig
    target: !u E.App.HelmChart
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.ReadConfig
    target: !u E.App.HelmRelease
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.ReadConfig
    target: !u E.App.Bootstrap
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.ReadConfig
    target: !u FP.App.SparkplugAddress

  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.WriteConfig
    target: !u FP.App.Info
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.WriteConfig
    target: !u E.App.Status
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.WriteConfig
    target: !u G.App.Config
  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.WriteConfig
    target: !u FP.App.SparkplugAddress

  - principal: !u E.Requirement.ServiceAccount
    permission: !u FP.Permission.ConfigDB.ManageObjects
    target: !u E.Class.Account

  - principal: !u E.Requirement.ServiceAccount
    permission: !u G.Perm.Pull
    target: !u E.Requirement.EdgeRepos
  - principal: !u E.Requirement.ServiceAccount
    permission: !u G.Perm.Push
    target: !u E.Requirement.EdgeRepos
groups:
  !u E.Perm.All:
    - !u E.Perm.Clusters
    - !u E.Perm.Secrets
