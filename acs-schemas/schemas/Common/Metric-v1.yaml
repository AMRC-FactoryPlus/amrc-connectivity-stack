$id: urn:uuid:b16275f1-e443-4c41-a482-fcbdfbd20769
$schema: https://json-schema.org/draft/2020-12/schema
type: object
properties:
  Schema_UUID:
    const: b16275f1-e443-4c41-a482-fcbdfbd20769
  Value:
    title: Value of the metric
    description: The static value for fixed metrics or the initial value for dynamic
      metrics.
    $comment: "Data type: As specified in DataType column"
    type: string
    examples:
      - Setting a numerical value 100
      - or a boolean value FALSE
      - or a static string such as manually entering a robot serial number
        RoBoT5678
  Sparkplug_Type:
    description: The Sparkplug data type of the underlying metric.
    type: string
    enum:
      - Unknown
      - Int8
      - Int16LE
      - Int16BE
      - Int32LE
      - Int32BE
      - Int64LE
      - Int64BE
      - UInt8
      - UInt16LE
      - UInt16BE
      - UInt32LE
      - UInt32BE
      - UInt64LE
      - UInt64BE
      - FloatLE
      - FloatBE
      - DoubleLE
      - DoubleBE
      - Boolean
      - String
      - DateTime
      - Text
      - UUID
      - DataSet
      - Bytes
      - File
      - Template
    title: Sparkplug Type
    $comment: Data type of metric from the types included in the Sparkplug
      specification (see
      https://raw.githubusercontent.com/AMRC-FactoryPlus/schemas/main/Common/Types/Sparkplug_Types.json)
  Method:
    title: Method
    description: The method used to obtain the value of the metric. Use REST style
      syntax for all protocols - GET for read-only outputs and static values and
      PUT for inputs or write operations.
    $comment: "Metric interaction method(s). 1) For REST: Use GET, PUT, POST, DELETE
      methods as required. Multiple methods for a single metric can be indicated
      using comma separated combinations. 2) Use REST style syntax for other
      protocols too: GET for read-only outputs and static values and PUT for
      inputs or write operations."
    type: string
    enum:
      - GET
      - PUT
      - POST
      - DELETE
      - GET,POST
    default: GET
  Address:
    title: Metric Address
    description: "This Metric Address field together with the Metric Path field
      uniquely identifies how to access a specific metric value from a device.
      The structure of this field (and of the Metric Path field) is determined
      by the protocol being used: 1) Fieldbus: Database memory address given as
      %aa####.* where aa is replaced by letters which determine the type of
      variable (eg. boolean input I and output Q, byte IB and QB, word IW and
      QW, and double word ID and QD). #### is replaced by digits representing
      the byte number of the metric and * by a digit representing the bit
      number. 2) REST: Path following the domain in a REST call URL. If using
      REST to access data from MiR AGVs, the data will be returned in JSON
      format. One complication here is that recursive function calls may be
      required to obtain the required data. For example, to obtain whether a
      robot is 'active' or not, you need to first run the GET /robots command to
      return a list of robots together with URLs that will provide more data for
      each robot. Then, using the URLs, another command of the form GET
      /robots/robot_id needs to be requested and this will return a more
      detailed JSON response where one of the metrics will be the 'active'
      status. So the active status of a robot first requires the output from
      another request for the list of robot URLs. In such cases, the notation to
      use is of the form <PathToList,IdentifiersJsonPath>, where PathToList
      should be replaced by the REST endpoint to the list of items (in our
      example /robots) and IdentifiersJsonPath should use JSONPath notation (for
      more information see the Metric Path Section below) for a list of all
      identifiers ($..url). The translation app will then cache the data
      available from each robot's URL in the list of robots and return the
      available variables for each (one of which is the 'active' status ). 3)
      MTConnect: This also uses REST as the protocol but will return a response
      in the form of XML rather than JSON. Again we must specify the path
      following the domain in a REST call URL and most of the live data for
      MTConnect devices can be accessed using /current . 4) OpenProtocol
      (SmartTools): The OpenProtocol MID number and the revision of the MID in
      the form mid****rev### where **** is replaced by the 4 digits representing
      the MID of the message and ### is replaced by the 3 digits representing
      the revision of the MID. 5) Other: TBD"
    type: string
    examples:
      - "Fieldbus: %QD1026 or %Q1194.0"
      - "OPC UA: ns=2;s=/Channel/Spindle/actSpeed"
      - REST:/status or for recursive calls </robots,$..url>
      - "MTConnect: /current"
      - "MQTT: /robot01/axis/1/position"
      - "OpenProtocol (SmartTools): mid0040rev001"
      - "Other: TBD"
  Path:
    title: Metric Path
    description: "This Metric Path field together with the Metric Address field
      uniquely identifies how to access a specific metric value from a device.
      The structure of this field (and of the Metric Address field) is
      determined by the message format. If the returned value is in JSON format,
      JSONPath notation should be used to uniquely identify the metric. The
      JSONPath starts with a $ and each child element is separated by a '.'. For
      the XML format and there is a standard notation to query XML data called
      XPath (analogous to JSONPath). The notation recommended here is to use the
      select all operator //* and then identify a specific metric by searching
      for a specific attribute name [@attributeName=\"test\"]. To obtain the
      text content (actual data values) of an XML node, we can use /text() at
      the end of the attribute query. In some cases (such as MTConnect
      Conditions) it may be required to obtain the name of the XML node (eg.
      Normal, Warning or Fault for an MTConnect Condition) itself rather than
      just the text associated with the node. Here, we must use local-name() and
      place the attribute query within the parenthesis. Note: appending
      /local-name() to the end of the attribute query will not work. Leave blank
      for protocols where the value is returned plain."
    type: string
    examples:
      - "Protocol Specific (OPC UA, Fieldbus): leave empty"
      - "JSON: $.status.errors.code or to return a metric from the first value
        in an array $[0].state"
      - "XML: x-axis position:
        //*[@componentId='x']//*[@dataItemId='xp']/text(), hydraulic condition:
        local-name(//*[@componentId='hydraulic']//*[@dataItemId='hyd']), message
        associated with the hydraulic
        condition://*[@componentId='hydraulic']//*[@dataItemId='hyd']/text()"
      - "Other: TBD"
  Eng_Unit:
    description: Unit associated with the metric. The notation used for the unit
      must be as specified by the DisplayName of the OPC UA Engineering units
      (this is an extensive list of available units, and following the OPC
      notation will prevent duplication or ambiguity of units). Can leave this
      empty to signify that a unit is not applicable to the metric.
    $comment: To ensure interoperability and consistency of notation, tags that are
      transported around the Factory+ network must have units in the form of the
      OPC UA Engineering units (more information can be found in
      https://reference.opcfoundation.org/v104/Core/docs/Part8/5.6.3/). The list
      of all available units can be found in the csv file
      http://www.opcfoundation.org/UA/EngineeringUnits/UNECE/UNECE_to_OPCUA.csv.
      The list of units in this sheet was copied from the UNECE_to_OPCUA.csv
      file on 09/12/2020.
    type: string
    examples:
      - mm
      - rad
      - "%"
      - °
      - m/s
      - °C
  Eng_Low:
    title: Engineering Low Limit
    description: Metric minimum possible value, for example, the hardware limit.
    $comment: "Data type: As specified in Sparkplug_Type field"
    type: number
    examples:
      - 0
      - -100
  Eng_High:
    title: Engineering High Limit
    description: Metric maximum possible value, for example, the hardware limit.
    $comment: "Data type: As specified in Sparkplug_Type field"
    type: number
    examples:
      - 1
      - 100
  Deadband:
    title: Deadband
    description: Numerical value used to prevent unnecessary updates for metrics
      whose values float by small amounts. If a metric value has changed by less
      than the deadband amount, the metric will not be updated to the new value.
      Particularly useful for metrics that frequently fluctuate by a small
      amount.
    $comment: "Data type: 1) Float - For specifying absolute value change. 2) Float
      with % symbol - For specifying percentage change based on Eng_Low and
      Eng_High. Eng_Low and Eng_High values are required for this mode."
    type: string
    examples:
      - "3.75"
      - 1.5%
  Tooltip:
    title: Tooltip
    description: Short metric description that will display as a Tooltip when
      hovering over the metric. Can be simple text or could try and include more
      context such as enum value definitions.
    type: string
    examples:
      - Spindle Speed
  Documentation:
    title: Documentation
    description: More detailed metric description, possibly including links to
      manuals. It should to try to provide enough context so that an uninvolved
      reader could understand what is being stored for this metric.
    type: string
    examples:
      - The current name of the fleet
  Record_To_Historian:
    title: Record to Historian
    description: Indicates if metric values will be recorded to the Factory+ Historian.
    type: boolean
    default: true
required:
  - Sparkplug_Type
  - Record_To_Historian
