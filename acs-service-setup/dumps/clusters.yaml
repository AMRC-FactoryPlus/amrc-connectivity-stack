#-REQUIRE: auth git
---
service: !u UUIDs.Service.ConfigDB
version: 2
objects:
  !u ConfigDB.Class.R2Class:
    !u Clusters.Class.ClusterGroups:
      name: "Clusters-managed group"

  !u Auth.Class.ServiceRole:
    !u Clusters.Requirement.ServiceAccount:
      name: "Cluster manager"
      subclassOf:
        - !u Auth.Class.CentralService
  !u Auth.Class.ServicePerms:
    !u Clusters.Perm.All:
      name: "Cluster manager permission"
      subclassOf:
        - !u UUIDs.Class.Permission
  !u Auth.Class.EdgeRole:
    !u Local.Role.EdgeFlux:
      name: "Edge flux"
      memberOf:
        - !u Auth.Class.EdgeRole
        - !u Clusters.Class.ClusterGroups
      subclassOf:
        - !u Auth.Class.EdgeService
    !u Local.Role.EdgeKrbkeys:
      name: "Edge krbkeys"
      memberOf:
        - !u Auth.Class.EdgeRole
        - !u Clusters.Class.ClusterGroups
      subclassOf:
        - !u Auth.Class.EdgeService

  !u Git.Class.Group:
    # XXX This is redundant. It was used for a permission grant which
    # never functioned; we grant the dynamic target directly.
    !u Clusters.Requirement.EdgeRepos:
      name: "Edge cluster repositories"
      subclassOf:
        - !u Git.Class.Repo
    !u Local.RepoGroup.Shared:
      name: "Shared repo"
      subclassOf:
        - !u Git.Class.Repo
    !u Local.RepoGroup.Cluster:
      name: "Edge cluster repo"
      memberOf:
        - !u Git.Class.Group
        - !u Clusters.Class.ClusterGroups
      subclassOf:
        - !u Git.Class.Repo

  !u ConfigDB.Class.R1Class:
    !u Clusters.Class.Cluster: { name: "Edge cluster" }

  !u UUIDs.Class.App:
    !u Clusters.App.Bootstrap:      { name: "Bootstrap script" }
    !u Clusters.App.Cluster: { name: "Edge cluster configuration" }
    !u Clusters.App.Flux:           { name: "Flux template" }
    !u Clusters.App.HelmChart: { name: "Helm chart template" }
    !u Clusters.App.HelmRelease: { name: "HelmRelease template" }
    !u Clusters.App.Status: { name: "Edge cluster setup status" }
  !u UUIDs.Class.Service:
    !u Clusters.Service.ClusterManager: { name: "Cluster manager" }
  !u Clusters.Perm.All:
    !u Clusters.Perm.Clusters: { name: "Manage clusters" }
    !u Clusters.Perm.Secrets: { name: "Manage secrets" }

  !u Local.RepoGroup.Shared:
    !u Local.Repo.HelmCharts:
      name: "Edge Helm charts"

configs:
  !u Git.App.Config:
    !u Local.Repo.HelmCharts:
      path: "shared/helm"

  !u UUIDs.App.ConfigSchema:
    !u Clusters.App.Bootstrap:
      title: Edge cluster bootstrap script template
      description: >
        A template for a shell script to bootstrap and edge cluster.
        Values that are strings will have {{handlebar}} templates
        expanded. Additional files `self-link.yaml` and
        `flux-system.yaml` will be added with manifests extracted from
        the cluster generation process.
      type: object
      required: [files, wrapper]
      additionalProperties: false
      properties:
        files:
          description: >
            A list of files to pack into the self-extracting part of the
            script. These will be unpacked by the wrapper.
          type: object
          additionalProperties: { type: string }
        wrapper:
          description: >
            A wrapper script to unpack the files and perform the
            bootstrap. The `{{files}}` template will be expanded to a
            set of commands to unpack the packed files.
          type: string
    !u Clusters.App.Cluster:
      title: Edge cluster configuration
      type: object
      required: [name, namespace]
      additionalProperties: false
      properties:
        name:
          description: A name for the cluster.
          type: string
        namespace:
          description: The k8s namespace to deploy to.
          type: string
        chart:
          description: The Helm chart to deploy.
          type: string
          format: uuid
        bare:
          description: Don't deploy Flux manifests
          type: boolean
          default: false
        values:
          description: Helm values for the cluster deployment
          type: object
          additionalProperties: true
    !u Clusters.App.Flux:
      title: Edge cluster Flux template
      description: >
        A template for creating an edge cluster Flux repo. Values that
        are strings will have {{handlebar}} templates expanded.
      type: object
      required: ["self-link.yaml"]
      additionalProperties:
        description: >
          A file to include in the flux repo. The key gives the name of
          the file and the value is an array of manifest templates.
        type: array
        items:
          description: A Kubernetes manifest template.
          oneOf:
            - type: object
              required: [apiVersion, kind]
            - type: string
              pattern: ^\{\{.*\}\}$
    !u Clusters.App.Status:
      title: Clusters private status
      type: object
      additionalProperties: true
      # No additional constraints, this is our private data
  # XXX These single-object configs don't give the user any opportunity
  # to override the configuration. But where is an override specified?
  !u Clusters.App.Bootstrap:
    !u Clusters.App.Bootstrap:
      files:
        bootstrap.sh: |
          #!/bin/sh
          
          N="{{namespace}}"

          wait_ready () {
              local obj="$1"
              while ! kubectl wait -n $N "$obj" --for condition=Ready
              do
                  sleep 2
              done
          }

          kexist () {
              kubectl get -o name -n "$1" "$2" >/dev/null 2>/dev/null
          }
          
          flux_ver () {
              kubectl get -o jsonpath='{$.spec.version.*.name}' \
                  crd/"$1".toolkit.fluxcd.io 2>/dev/null \
                  | grep -q "$2"
          }

          if ! kubectl get nodes >/dev/null 2>&1
          then
              echo "I don't appear to have access to a cluster." >&2
              echo "Maybe you need to set KUBECONFIG?" >&2
              exit 1
          fi
          echo "Deploying to edge cluster:"
          kubectl get nodes
          read -p "Press Return to continue or Ctrl-C to abort:" \
              tmp </dev/tty

          want_flux=YES
          if kexist flux-system deploy/helm-controller
          then
              want_flux=NO
              echo "Flux is already installed, checking compatibility..."
              if ! flux_ver helmreleases.helm v2beta2 \
                  && flux_ver gitrepositories.source v1 \
                  && flux_ver kustomizations.kustomize v1
              then
                  echo "Flux version is incompatible with ACS edge cluster!" >&2
                  exit 1
              fi
          fi

          echo "Creating namespace $N..."
          kexist none namespace/"$N" || kubectl create namespace "$N"

          echo "Joining edge cluster to central cluster..."
          kubectl create -f edge-bootstrap.yaml
          wait_ready pod/edge-bootstrap
          kubectl attach -ti -n $N -c bootstrap edge-bootstrap </dev/tty
          kubectl delete -f edge-bootstrap.yaml

          if ! kexist $N secret/flux-secrets
          then
              echo "Cluster join failed! (wrong password?)" >&2
              exit 1
          fi

          if [ "$want_flux" = "YES" ]
          then
              echo "Installing Flux..."
              kubectl apply -f flux-system.yaml
          fi

          echo "Installing edge cluster components..."
          kubectl apply -f self-link.yaml
          wait_ready kustomization/self-link

          echo "Done."
        edge-bootstrap.yaml: |
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            namespace: {{namespace}}
            name: krb5-conf
          data:
            krb5.conf: |
              [libdefaults]
                  default_realm = {{realm}}
                  dns_canonicalize_hostname = false
                  udp_preference_limit = 1
                  spake_preauth_groups = edwards25519

              [domain_realm]
                  {{domain}} = {{realm}}

              [realms]
                  {{realm}} = {
                      kdc = kdc.{{domain}}
                      admin_server = kadmin.{{domain}}
                      disable_encrypted_timestamp = true
                  }
          ---
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            namespace: {{namespace}}
            name: edge-bootstrap
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            namespace: {{namespace}}
            name: acs-edge-bootstrap
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
            - kind: ServiceAccount
              namespace: {{namespace}}
              name: edge-bootstrap
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            namespace: {{namespace}}
            name: edge-bootstrap
          spec:
            serviceAccountName: edge-bootstrap
            restartPolicy: Never
            volumes:
              - name: krb5-conf
                configMap:
                  name: krb5-conf
            containers:
              - name: bootstrap
                image: {{krbkeys}}
                imagePullPolicy: Always
                command:
                  - "/usr/bin/python3"
                  - "-m"
                  - "amrc.factoryplus.krbkeys.cluster"
                stdin: true
                tty: true
                env:
                  - name: CLUSTER_NAME
                    value: {{name}}
                  - name: REALM
                    value: {{realm}}
                  - name: NAMESPACE
                    value: {{namespace}}
                volumeMounts:
                  - mountPath: /etc/krb5.conf
                    name: krb5-conf
                    subPath: krb5.conf
      wrapper: |
        #!/bin/sh
        
        set -e

        wd=$(mktemp -d)
        cd "$wd"

        {{files}}

        . ./bootstrap.sh
        cd /
        rm -rf "$wd"
  !u Clusters.App.Flux:
    !u Clusters.App.Flux:
      edge-cluster.yaml:
        - "{{ helm }}"
      flux-system.yaml:
        - apiVersion: kustomize.toolkit.fluxcd.io/v1
          kind: Kustomization
          metadata:
            name: flux-system
            namespace: "{{ namespace }}"
          spec:
            interval: 3h0m0s
            path: ./flux-system
            prune: true
            sourceRef:
              kind: GitRepository
              name: helm-charts
      helm-charts.yaml:
        - apiVersion: source.toolkit.fluxcd.io/v1
          kind: GitRepository
          metadata:
            name: helm-charts
            namespace: "{{ namespace }}"
          spec:
            interval: 3m
            ref:
              branch: main
            secretRef:
              name: flux-secrets
            url: "{{ url.helm }}"
      self-link.yaml:
        - apiVersion: source.toolkit.fluxcd.io/v1
          kind: GitRepository
          metadata:
            name: self-link
            namespace: "{{ namespace }}"
          spec:
            interval: 3m
            ref:
              branch: main
            secretRef:
              name: flux-secrets
            url: "{{ url.self }}"
        - apiVersion: kustomize.toolkit.fluxcd.io/v1
          kind: Kustomization
          metadata:
            name: self-link
            namespace: "{{ namespace }}"
          spec:
            interval: 3m
            path: ./
            prune: true
            sourceRef:
              kind: GitRepository
              name: self-link
---
service: !u UUIDs.Service.Authentication
version: 2
grants:
  !u Clusters.Requirement.ServiceAccount:
    !u UUIDs.Permission.Directory.AdvertiseService:
      !u Clusters.Service.ClusterManager: false
    !u UUIDs.Permission.Auth.ReadACL:
      !u Clusters.Perm.All: true

    # XXX This is nearly root-equivalent.
    !u UUIDs.Permission.Auth.ManageKerberos: null

    !u UUIDs.Permission.Auth.ManageACL:
      !u Git.Perm.Pull: false

    # XXX This should be per-deployment but it's not clear how to acheive
    # that. The notify/v1 proposal would dynamically grant Sparkplug
    # permissions based on some other set of change-notify permissions.
    # XXX The cluster-manager should use notify/v2 instead.
    !u ACS.Role.EdgeNodeConsumer:
      !u ACS.Device.ConfigDB: false

    !u UUIDs.Permission.ConfigDB.ReadConfig:
      !u UUIDs.App.Info: false
      !u UUIDs.App.ServiceConfig: false
      !u Clusters.App.Cluster: false
      !u Clusters.App.Status: false
      !u Clusters.App.EdgeStatus: false
      !u Clusters.App.Flux: false
      !u Clusters.App.HelmChart: false
      !u Clusters.App.HelmRelease: false
      !u Clusters.App.Bootstrap: false
      !u UUIDs.App.SparkplugAddress: false

    !u UUIDs.Permission.ConfigDB.WriteConfig:
      !u UUIDs.App.Info: false
      !u Clusters.App.Status: false
      !u Git.App.Config: false
      !u UUIDs.App.SparkplugAddress: false

    !u ConfigDB.Perm.CreateObject:
      !u Clusters.Class.Account: false
    !u ConfigDB.Perm.WriteMemberships:
      !u UUIDs.Special.Mine: true
    !u ConfigDB.Perm.WriteMembers:
      !u Clusters.Class.ClusterGroups: true

    !u Git.Perm.Pull:
      # XXX This does nothing; the Req has no members.
      !u Clusters.Requirement.EdgeRepos: true
      !u Local.RepoGroup.Shared: true
      !u Local.RepoGroup.Cluster: true
    !u Git.Perm.Push:
      # XXX as above
      !u Clusters.Requirement.EdgeRepos: true
      !u Local.RepoGroup.Cluster: true

  !u Local.Role.EdgeFlux:
    !u Git.Perm.Pull:
      !u Local.RepoGroup.Shared: true

  !u Local.Role.EdgeKrbkeys:
    !u ConfigDB.Perm.CreateObject:
      !u Auth.Class.EdgeService: false
    !u ConfigDB.Perm.WriteMemberships:
      !u UUIDs.Special.Mine: true
      # XXX This is too broad. Ideally we need a group per cluster.
      !u Local.Role.EdgeAgent: true
    !u ConfigDB.Perm.WriteMembers:
      !u Edge.Group.EdgeGroup: true

    !u ConfigDB.Perm.ReadConfig:
      !u UUIDs.App.Info: false
      !u UUIDs.App.SparkplugAddress: false
    !u ConfigDB.Perm.WriteConfig:
      !u UUIDs.App.Info: false
      !u UUIDs.App.SparkplugAddress: false

    !u Auth.Perm.ReadKerberos: null
    # XXX This is root-equivalent
    !u Auth.Perm.ManageKerberos: null
    # XXX Not much use at present due to strict ranks. Composite perms
    # are a rank higher than ordinary perms. Unused.
    !u Auth.Perm.ManageACL:
      !u Edge.Group.EdgePermission: true
