# Create static service accounts.
# XXX These should be created dynamically by krbkeys. But there are
# some bootstrap issues, especially with KrbKeys itself.
# REQUIRE: auth sparkplug
---
service: !u UUIDs.Service.ConfigDB
version: 2
objects:
  !u Auth.Class.CentralService:
    !u ACS.ServiceAccount.Auth:
      name: "Authorisation"
    !u ACS.ServiceAccount.CmdEsc:
      name: "Command escalation"
      memberOf:
        - !u Auth.Class.CentralService
        - !u ACS.Group.SparkplugNode
    !u ACS.ServiceAccount.ConfigDB:
      name: "ConfigDB"
      memberOf:
        - !u Auth.Class.CentralService
        - !u ACS.Group.SparkplugNode
    !u ACS.ServiceAccount.Directory:
      name: "Directory"
      memberOf:
        - !u Auth.Class.CentralService
        - !u ACS.Group.SparkplugNode
    !u ACS.ServiceAccount.KrbKeys:
      name: "Kerberos keys operator"
    !u ACS.ServiceAccount.Manager:
      name: "Manager"
    !u ACS.ServiceAccount.MQTT:
      name: "MQTT broker"
    !u ACS.ServiceAccount.Warehouse:
      name: "Sparkplug historian ingester"

configs:
  !u UUIDs.App.SparkplugAddress:
    !u ACS.ServiceAccount.CmdEsc:
      group_id: !acs "${organisation}-Service-Core"
      node_id: "Command_Escalation"
    !u ACS.ServiceAccount.ConfigDB:
      group_id: !acs "${organisation}-Service-Core"
      node_id: "Config_DB"
    !u ACS.ServiceAccount.Directory:
      group_id: !acs "${organisation}-Service-Core"
      node_id: "Directory"
---
service: !u UUIDs.Service.Authentication
version: 2
identities:
  !u ACS.ServiceAccount.Directory:
    kerberos: sv1directory
  !u ACS.ServiceAccount.Auth:
    kerberos: sv1auth
  !u ACS.ServiceAccount.ConfigDB:
    kerberos: sv1configdb
  !u ACS.ServiceAccount.Manager:
    kerberos: sv1manager
  !u ACS.ServiceAccount.CmdEsc:
    kerberos: sv1cmdesc
  !u ACS.ServiceAccount.MQTT:
    kerberos: sv1mqtt
  !u ACS.ServiceAccount.Warehouse:
    kerberos: sv1warehouse
  !u ACS.ServiceAccount.KrbKeys:
    kerberos: op1krbkeys
grants:
  !u ACS.ServiceAccount.Directory:
    !u MQTT.Perm.ReadWholeNamespace: null
    !u UUIDs.Permission.Auth.ReadACL:
      !u ACS.PermGroup.Directory: true
    !u Auth.Perm.ReadKerberos: null
    !u UUIDs.Permission.CmdEsc.Rebirth: null

  !u ACS.ServiceAccount.MQTT:
    !u UUIDs.Permission.Auth.ReadACL:
      !u ACS.PermGroup.MQTT: true
    !u UUIDs.Permission.ConfigDB.ReadConfig:
      !u ACS.App.MQTTPermTemplate: false
      !u UUIDs.App.SparkplugAddress: false
    !u Directory.Perm.AdvertiseService:
      !u UUIDs.Service.MQTT: false

  !u ACS.ServiceAccount.ConfigDB:
    !u UUIDs.Permission.Auth.ReadACL:
      !u ACS.PermGroup.ConfigDB: true

  !u ACS.ServiceAccount.KrbKeys:
    !u Auth.Perm.ReadKerberos: null
    !u Auth.Perm.ManageKerberos: null
    !u Auth.Perm.ManageACL: null
    !u Auth.Perm.ManageGroup: null
    !u UUIDs.Permission.ConfigDB.ReadConfig:
      !u UUIDs.App.Info: false
      !u UUIDs.App.SparkplugAddress: false
    !u ConfigDB.Perm.WriteConfig:
      !u UUIDs.App.Info: false
      !u UUIDs.App.SparkplugAddress: false
    !u ConfigDB.Perm.ManageObjects: null

  !u ACS.ServiceAccount.Manager:
    !u ConfigDB.Perm.ManageObjects:
      !u Clusters.Class.Cluster: false
      !u Auth.Class.EdgeAgent: false
    !u ConfigDB.Perm.ReadConfig:
      !u UUIDs.App.ServiceConfig: false
      !u UUIDs.App.Info: false
      !u Clusters.App.EdgeStatus: false
      !u Clusters.App.Cluster: false
      !u Clusters.App.HelmChart: false
      !u Edge.App.AgentConfig: false
    !u ConfigDB.Perm.WriteConfig:
      !u Clusters.App.Cluster: false
      !u Edge.App.Deployment: false
      !u Edge.App.AgentConfig: false
      !u UUIDs.App.Info: false
      !u UUIDs.App.SparkplugAddress: false
    !u Clusters.Perm.Clusters: null

  !u ACS.ServiceAccount.CmdEsc:
    !u UUIDs.Permission.ConfigDB.ReadConfig:
      !u CmdEsc.App.CmdDef: false
      !u UUIDs.App.SparkplugAddress: false
    !u UUIDs.Permission.Auth.ReadACL:
      !u ACS.PermGroup.CmdEsc: true
