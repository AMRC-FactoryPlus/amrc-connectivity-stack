{{ if .Values.manager.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: manager
  namespace: {{ .Release.Namespace }}
  labels:
    component: manager
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      component: manager
  template:
    metadata:
      labels:
        component: manager
        factory-plus.service: manager
    spec:
      {{- with .Values.acs.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: factoryplus-manager
      volumes:
        - name: manager-keytab
          secret:
            secretName: manager-keytab
        - name: krb5-conf
          configMap:
            name: krb5-conf
        - name: manager-ccache-storage
          persistentVolumeClaim:
            claimName: manager-ccache-storage
      initContainers:
        - name: register-with-directory
{{ include "amrc-connectivity-stack.image" (list . .Values.curl) | indent 10 }}
          env:
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-password
                  key: password
          command: [ 'sh', '-c', 'until curl -X PUT -o /dev/null -w "%{http_code}" -u "admin:${PASSWORD}" -H "Content-Type: application/json" --data-raw "{ \"url\": \"http://manager.{{.Release.Namespace}}.svc.cluster.local\" }" http://directory.{{.Release.Namespace}}.svc.cluster.local/v1/service/619eecab-742d-4824-8b97-bcae472e5c04/advertisment/2340e706-1280-420c-84a6-016547b55e95 | grep -E "2[0-9]{2}" > /dev/null; do sleep 10; done' ]
        # Do as little work as possible as root... We need to chown the storage
        # as the default permissions will not be correct.
        - name: chown-storage
          image: "{{ include "amrc-connectivity-stack.image-name" (list . .Values.manager ) }}-backend"
          command: [ "/bin/sh", "-c" ]
          args:
            - |
              echo "Setting ccache volume permissions"
              chown www-data:www-data /app/storage/ccache
              chmod 700 /app/storage/ccache
              ls -ld /app/storage/ccache
          securityContext:
            runAsUser: 0
          volumeMounts:
            - mountPath: /app/storage/ccache
              name: manager-ccache-storage
        - name: migrate-database
          image: "{{ include "amrc-connectivity-stack.image-name" (list . .Values.manager ) }}-backend"
          imagePullPolicy: {{ coalesce .Values.manager.image.pullPolicy .Values.acs.defaultPullPolicy }}
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: manager-database-secret
                  key: postgres-password
            - name: MINIO_KEY
              valueFrom:
                secretKeyRef:
                  name: manager-minio-secret
                  key: CONSOLE_ACCESS_KEY
            - name: MINIO_SECRET
              valueFrom:
                secretKeyRef:
                  name: manager-minio-secret
                  key: CONSOLE_SECRET_KEY
          envFrom:
            - configMapRef:
                name: manager-config
            - secretRef:
                name: manager-secrets
          command: 
            - sh
            - '-c'
            - |
              while php artisan migrate:status --pending --no-ansi | grep -q Pending
              do
                echo "Waiting for service-setup to complete database migration"
                sleep 5
              done
        - name: create-admin-user
          image: "{{ include "amrc-connectivity-stack.image-name" (list . .Values.manager ) }}-backend"
          imagePullPolicy: {{ coalesce .Values.manager.image.pullPolicy .Values.acs.defaultPullPolicy }}
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: manager-database-secret
                  key: postgres-password
          envFrom:
            - configMapRef:
                name: manager-config
            - secretRef:
                name: manager-secrets
          command:
            - "sh"
            - "-c"
            - |
              php artisan tinker --execute="if (User::count() === 0) {User::create(['username' => 'admin@{{.Values.identity.realm}}', 'administrator' => 1]);}"
      containers:
        - name: backend
          image: "{{ include "amrc-connectivity-stack.image-name" (list . .Values.manager ) }}-backend"
          imagePullPolicy: {{ coalesce .Values.manager.image.pullPolicy .Values.acs.defaultPullPolicy }}
          env:
            - name: KRB5_CONFIG
              value: /config/krb5-conf/krb5.conf
            - name: MINIO_KEY
              valueFrom:
                secretKeyRef:
                  name: manager-minio-secret
                  key: CONSOLE_ACCESS_KEY
            - name: MINIO_SECRET
              valueFrom:
                secretKeyRef:
                  name: manager-minio-secret
                  key: CONSOLE_SECRET_KEY
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: manager-database-secret
                  key: postgres-password
          envFrom:
            - configMapRef:
                name: manager-config
            - secretRef:
                name: manager-secrets
          volumeMounts:
            - mountPath: /config/keytab
              name: manager-keytab
            - mountPath: /config/krb5-conf
              name: krb5-conf
            - mountPath: /app/storage/ccache
              name: manager-ccache-storage
        - name: frontend
          image: "{{ include "amrc-connectivity-stack.image-name" (list . .Values.manager ) }}-frontend"
          imagePullPolicy: {{ coalesce .Values.manager.image.pullPolicy .Values.acs.defaultPullPolicy }}
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: manager-ccache-storage
  namespace: {{ .Release.Namespace }}
  labels:
    component: manager
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi
{{- end -}}
