# This manifest runs a Job whenever the Helm chart is installed or
# upgraded. This Job pulls in an image with configuration to load into
# the F+ services which is specific to deployment decisions made by ACS.
apiVersion: batch/v1
kind: CronJob
metadata:
  namespace: {{ .Release.Namespace }}
  # Give the job a random id so helm reruns it on helm upgrade.
  name: service-setup
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  schedule: "*/5 * * * *"  # Runs every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: service-setup
          restartPolicy: OnFailure
          volumes:
            - name: git-checkouts
              emptyDir: { }
            - name: manager-keytab
              secret:
                secretName: manager-keytab
            - name: krb5-conf
              configMap:
                name: krb5-conf
            - name: manager-ccache-storage
              emptyDir: { }
          initContainers:
            - name: service-setup
{{ include "amrc-connectivity-stack.image" (list . .Values.serviceSetup) | indent 14 }}
              env:
                - name: DIRECTORY_URL
                  value: http://directory.{{ .Release.Namespace }}.svc.cluster.local
                - name: SERVICE_USERNAME
                  value: admin
                - name: SERVICE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: admin-password
                      key: password
                - name: VERBOSE
                  value: ALL,!token,!service
                - name: GIT_CHECKOUTS
                  value: /data
                - name: SS_CONFIG
                  value: {{ .Values.serviceSetup.config | toRawJson | quote }}
                - name: ACS_CONFIG
                  value: {{
                        dict
                           "organisation"    .Values.acs.organisation
                           "namespace"       .Release.Namespace
                           "domain"          .Values.acs.baseUrl
                           "k8sdomain"       "cluster.local"
                           "secure"          (.Values.acs.secure | ternary "s" "")
                           "realm"           .Values.identity.realm
                           "directory"
                             (include "amrc-connectivity-stack.external-url"
                               (list . "directory"))
                         | toRawJson | quote }}
              volumeMounts:
                - mountPath: /data
                  name: git-checkouts
            - name: edge-helm-charts
{{ include "amrc-connectivity-stack.image" (list . .Values.edgeHelm) | indent 14 }}
              env:
                - name: DIRECTORY_URL
                  value: http://directory.{{ .Release.Namespace }}.svc.cluster.local
                - name: SERVICE_USERNAME
                  value: admin
                - name: SERVICE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: admin-password
                      key: password
                - name: VERBOSE
                  value: ALL,!token,!service
                - name: GIT_REPO_PATH
                  value: {{ .Values.edgeHelm.repoPath }}
            - name: manager
              image: "{{ include "amrc-connectivity-stack.image-name" (list . .Values.manager ) }}-backend"
              imagePullPolicy: {{ .Values.manager.image.pullPolicy }}
              command:
                - /bin/sh
                - "-c"
                - |
                  php artisan migrate --force
                  php artisan connections:register
              env:
                - name: KRB5_CONFIG
                  value: /config/krb5-conf/krb5.conf
                - name: MINIO_KEY
                  valueFrom:
                    secretKeyRef:
                      name: manager-minio-secret
                      key: CONSOLE_ACCESS_KEY
                - name: MINIO_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: manager-minio-secret
                      key: CONSOLE_SECRET_KEY
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: manager-database-secret
                      key: postgres-password
                - name: SERVICE_USERNAME
                  value: admin
                - name: SERVICE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: admin-password
                      key: password
                - name: LOG_LEVEL
                  value: debug
              envFrom:
                - configMapRef:
                    name: manager-config
                - secretRef:
                    name: manager-secrets
              volumeMounts:
                - mountPath: /config/keytab
                  name: manager-keytab
                - mountPath: /config/krb5-conf
                  name: krb5-conf
                - mountPath: /app/storage/ccache
                  name: manager-ccache-storage
          containers:
          # We need a do-nothing container to keep k8s happy
          - name: done
{{ include "amrc-connectivity-stack.image" (list . .Values.shell) | indent 12 }}
            command: [ "/bin/true" ]
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: service-setup
  namespace: {{ .Release.Namespace }}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: service-setup-role
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [ "apps" ]
    resources: [ "deployments" ]
    verbs: [ "get", "patch", "update", "list", "watch" ]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: service-setup-binding
  namespace: {{ .Release.Namespace }}
subjects:
  - kind: ServiceAccount
    name: service-setup
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: service-setup-role
  apiGroup: rbac.authorization.k8s.io
