{{- $k8sname := include "acs.k8sname" . }}
# This deployment is configured to completely disable Kubernetes back-offs
# for MQTT broker. This ensures that when the container fails, it will be
# restarted immediately without any exponential back-off delay.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}-{{ $k8sname }}
  namespace: {{ .Release.Namespace }}
  annotations:
    # Custom annotation to document that this deployment has back-offs disabled
    # This can be used by operators or scripts to identify deployments with this configuration
    factory-plus.app/disable-backoff: "true"
  labels:
    factory-plus.app: {{ .Chart.Name }}
    factory-plus.uuid: {{ .Values.uuid }}
    factory-plus.name: {{ .Values.name }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      factory-plus.app: {{ .Chart.Name }}
      factory-plus.uuid: {{ .Values.uuid }}
  template:
    metadata:
      labels:
        factory-plus.app: {{ .Chart.Name }}
        factory-plus.uuid: {{ .Values.uuid }}
        factory-plus.name: {{ .Values.name }}
      annotations:
        # The following annotations help disable back-offs for MQTT broker pods:

        # This annotation tells the cluster autoscaler that it's safe to evict this pod
        # This prevents back-offs that might occur during cluster scaling operations
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"

        # This annotation disables AppArmor restrictions for the mqtt-broker container
        # This prevents security-related back-offs that might occur due to AppArmor policies
        container.apparmor.security.beta.kubernetes.io/mqtt-broker: "unconfined"
    spec:
      # Setting restartPolicy to Always ensures the pod will be restarted if it exits
      # While this doesn't directly disable back-offs, it works with other settings
      # to ensure the pod is restarted as quickly as possible
      restartPolicy: Always
{{ if .Values.hostname }}
      nodeSelector:
        kubernetes.io/hostname: {{ .Values.hostname | quote }}
      tolerations: {{ .Values.tolerations.specific | toYaml | nindent 8 }}
{{ else }}
      tolerations: {{ .Values.tolerations.floating | toYaml | nindent 8 }}
{{ end }}
      volumes:
        - name: config
          configMap:
            name: {{ .Chart.Name }}-{{ $k8sname }}
      containers:
        - name: mqtt-broker
{{ list . "mosquitto" | include "acs.image" | indent 10 }}
          # This startup probe is a key mechanism for preventing back-offs
          #
          # How it works:
          # 1. The probe always succeeds (runs the 'true' command which always returns exit code 0)
          # 2. When a container fails, Kubernetes will restart it and then immediately run the startup probe
          # 3. With an extremely high failure threshold (9999999), Kubernetes will keep trying the probe
          #    without applying back-off delays even if the container keeps failing
          # 4. This effectively bypasses Kubernetes' built-in back-off mechanism, which cannot be
          #    directly disabled through standard configuration
          #
          # This ensures that the container restarts immediately after a failure, rather than
          # waiting for increasingly longer periods of time
          startupProbe:
            exec:
              command:
                - sh
                - -c
                - "true"
            # Start checking almost immediately after container starts
            initialDelaySeconds: 1
            # Check frequently
            periodSeconds: 1
            # Set an extremely high threshold to prevent Kubernetes from giving up
            # This is the key to preventing back-offs
            failureThreshold: 9999999
          volumeMounts:
            - mountPath: /mosquitto/config
              name: config
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Chart.Name }}-{{ $k8sname }}
data:
  mosquitto.conf: |
    listener 1883
    allow_anonymous true
