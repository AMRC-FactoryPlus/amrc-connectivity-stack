
*****************************************************************
*** PLEASE BE PATIENT: ACS may take a few minutes to install ***
*****************************************************************

Thanks for installing the AMRC Connectivity Stack (ACS), the AMRC's open-source implementation of the Factory+ framework.

Ensure that you familiarise yourself with the components and concepts of Factory+ (factoryplus.app.amrc.co.uk) before continuing. This chart installs a full end-to-end deployment of Factory+ and there are a lot of moving parts.

ðŸ“£ Required Steps
-------------

This chart includes an instance of Switchboard to automatically configure DNS and TLS for the deployment. It assumes that you have instances of external-dns and cert-manager installed and configured on your cluster. To enable Switchboard make sure to set switchboard.enabled to true in the Values.yaml file and configure the chart as per the the Switchboard documentation: https://github.com/borchero/switchboard/blob/main/chart/README.md.

If you do not have external-dns and cert-manager installed or would rather configure DNS & TLS manually then you can create a wildcard DNS entry configured to direct all *.{{.Values.acs.externalDomain}} wildcard requests to your Kubernetes cluster. If you have enabled acs.secure then you must also create a wildcard TLS secret on the cluster in the default namespace with the same name factoryplus-tls.

You specified {{.Values.acs.externalDomain}} as your base URL. Please ensure that you have a wildcard DNS entry configured to direct all *.{{.Values.acs.externalDomain}} requests to the load balancer.

{{ if .Values.acs.secure}}
ðŸ”’ Because secure mode is enabled, you need to ensure that your cluster has a wildcard TLS certificate (type: kubernetes.io/tls) called {{.Values.acs.tlsSecretName}} in the "default" namespace on your cluster. It must have a certificate value in the `tls.crt` key and the private key value in the `tls.key` key.
{{end -}}

ðŸš€ Get Started
-------------

Get the password for the admin user by running the following command until it returns the password.

echo $(sudo kubectl get secret krb5-passwords -o jsonpath="{.data.admin}" -n {{.Release.Namespace}} | base64 --decode)

Once you have the admin password you can connect to the MQTT broker at {{ .Values.acs.secure | ternary "mqtts://" "mqtt://" }}mqtt.{{.Values.acs.externalDomain}}:{{ .Values.acs.secure | ternary "8883" "1883" }} and subscribe to spBv1.0/#. It's advisable to do this before you start adding devices to the system so that you can see all traffic.

Next, log into the manager at {{ .Values.acs.secure | ternary "https://" "http://" }}manager.{{.Values.acs.externalDomain}} as the `admin` user and create a Group, Node (Soft Gateway) and Device. Configure the device by completing the Information, Connection, and Schema tabs until you see a green VALID tag in the top right corner. Once you've configured the device you should see MQTT traffic begin to flow.

Once data is flowing you can start to build dashboards in Grafana. Log into Grafana with the same admin credentials at {{ .Values.acs.secure | ternary "https://" "http://" }}grafana.{{.Values.acs.externalDomain}} and create a new dashboard, where you'll be given the option of two datasources; InfluxDB (Flux) and InfluxDB (InfluxQL). You can read more about the differences between Flux and InfluxQL at the link below, but in short InfluxQL is older but easier to get started with and Flux is more powerful but has a steeper learning curve. Factory+ creates a measurement for each metric configured for a device, so if you have more than one of the same type of device make sure to apply additional WHERE statements to the query to filter to the correct group, node and device.

https://docs.influxdata.com/influxdb/v2.7/reference/syntax/flux/flux-vs-influxql/

Services
--------
Manager: {{ .Values.acs.secure | ternary "https://" "http://" }}manager.{{.Values.acs.externalDomain}}
MQTT: {{ .Values.acs.secure | ternary "mqtts://" "mqtt://" }}mqtt.{{.Values.acs.externalDomain}}:{{ .Values.acs.secure | ternary "8883" "1883" }}
Grafana: {{ .Values.acs.secure | ternary "https://" "http://" }}grafana.{{.Values.acs.externalDomain}}
