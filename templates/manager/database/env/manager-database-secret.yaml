# retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
{{- $secretObj := (lookup "v1" "Secret" .Values.acs.namespace "manager-database-secret") | default dict }}
{{- $secretData := (get $secretObj "data") | default dict }}
# set $postgresPassword to existing secret data or generate a random one when not exists
{{- $postgresPassword := (get $secretData "manager-database-secret/postgres-password") | default (randAlphaNum 32 | b64enc) }}
# set $replicationPassword to existing secret data or generate a random one when not exists
{{- $replicationPassword := (get $secretData "manager-database-secret/replication-password") | default (randAlphaNum 32 | b64enc) }}

apiVersion: v1
kind: Secret
metadata:
  name: "manager-database-secret"
  namespace: {{ .Values.acs.namespace | required "values.namespace is required!" }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  postgres-password: {{ $postgresPassword | quote }}
  replication-password: {{ $replicationPassword | quote }}