# Generate a certificate, we might need it if we're creating a new pair
{{- $cert := genSelfSignedCertWithKey "" (list) (list) 3650 (genPrivateKey "rsa") }}
# retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
{{- $secretObj := (lookup "v1" "Secret" .Values.acs.namespace "manager-secrets") | default dict }}
{{- $secretData := (get $secretObj "data") | default dict }}
# set $publicKey/$privateKey to existing secret data or use generated certificate when not exists
{{- $appKey := (get $secretData "manager-secrets/APP_KEY") | default (randAlphaNum 32 | b64enc) }}
{{- $publicKey := (get $secretData "manager-secrets/PASSPORT_PUBLIC_KEY") | default ($cert.Cert) }}
{{- $privateKey := (get $secretData "manager-secrets/PASSPORT_PRIVATE_KEY") | default ($cert.Key) }}

apiVersion: v1
kind: Secret
metadata:
  name: manager-secrets
  namespace: {{ .Values.acs.namespace | required "values.acs.namespace is required!" }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
stringData:
  APP_KEY: "base64:{{ $appKey }}"
  DB_PASSWORD: {{.Values.manager.database.password | quote | required "values.manager.database.password is required!"}}
  MINIO_SECRET: {{.Values.manager.minio.secret | quote | required "values.manager.minio.secret is required!"}}
  MEILISEARCH_KEY: {{.Values.manager.meilisearch.key | quote | required "values.manager.meilisearch.key is required!"}}
  PASSPORT_PUBLIC_KEY: {{ $publicKey | quote }}
  PASSPORT_PRIVATE_KEY: {{ $privateKey | quote }}